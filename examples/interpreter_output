X
M
W
type du parametre : list[int]
hello hello
type du parametre : list[int]
hello hello
{}
type de l'expression : <class 'str'>
var name : L val dic 1
hello<class 'typechecking.type_ast.ListType'>
var name : N val dic 1
hello<class 'typechecking.type_ast.ListType'>
assign.expr vaut <class 'typechecking.prog_ast.EAdd'>
ceci vaut 2
var : <typechecking.prog_ast.EAdd object at 0x7f26711af240>
<typechecking.prog_ast.EVar object at 0x7f26711afc50>
var name : X val dic 2
arg vaut <typechecking.prog_ast.EVar object at 0x7f26711afc50>
arg vaut <typechecking.prog_ast.ENum object at 0x7f26711afb70>
{'X': (ListType(IntType()), 'function')}
type de l'expression : <class 'str'>
var name : L val dic 1
hello<class 'typechecking.type_ast.ListType'>
var name : L val dic 1
hello<class 'typechecking.type_ast.ListType'>
assign.expr vaut <class 'typechecking.prog_ast.EList'>
ceci vaut 2
var : <typechecking.prog_ast.EList object at 0x7f26711af0f0>
{'X': (ListType(IntType()), 'function'), 'M': (ListType(ListType(IntType())), 'function')}
type de l'expression : <class 'str'>
var name : M val dic 2
assign.expr vaut <class 'typechecking.prog_ast.Slicing'>
ceci vaut 2
var : <typechecking.prog_ast.Slicing object at 0x7f26711af390>
<typechecking.prog_ast.Indexing object at 0x7f26711af3c8>
var name : W val dic 2
<typechecking.prog_ast.EVar object at 0x7f26711af278>
arg vaut <typechecking.prog_ast.Indexing object at 0x7f26711af3c8>
arg vaut <typechecking.prog_ast.ENum object at 0x7f26711af4a8>
type du parametre : list[int]
hello hello
arg vaut <typechecking.prog_ast.EList object at 0x7f2671161a90>
arg vaut <typechecking.prog_ast.EList object at 0x7f26711610f0>
arg vaut <typechecking.prog_ast.EList object at 0x7f2671161b00>
arg vaut <typechecking.prog_ast.EList object at 0x7f26711617f0>
arg vaut <typechecking.prog_ast.EList object at 0x7f2671161ac8>
arg vaut <typechecking.prog_ast.EList object at 0x7f26711615f8>
